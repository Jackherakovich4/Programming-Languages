//Jack Herakovich https://github.com/JackHerakovich/Programming-Languages/tree/main/Language
program ::=statementList;
statementList ::= statement
                | statement statementList;
statement ::= function
            | variableInitialization
            | forLoop
            | assignment
            | whileLoop
            | infiniteLoop
            | ifStatement
            | expression
            | elseStatement
            | arrayInitialization
            | arrayListInitialization
            | functionCall;

variableInitialization::="¡" IDENTIFIER "=" expression;
expression::= unary operator unary
            | unary operator
            | expression operator unary
            | expression operator expression
            | unary operator expression
            | unary;

forLoop::= "≈" "("variableInitialization";" comparison";" expression ")" block;
whileLoop::= "◊" "(" comparison ")" block;
infiniteLoop::= "∞" block;
ifStatement ::= "›" "("comparison")" block
              | "›" "("comparison")" block "»" ifStatement
              | "›" "("comparison")" block elseStatement
              | "›" "("comparison")" block "»" ifStatement elseStatement;
elseStatement::= "‹" block;
function::= "∏" IDENTIFIER "("parameter")" block;
parameter::= variable
           | variable","parameter
           | function
           | ;
block::="¿" statementList "?";
comparison::=unary comparator unary
            | comparison logicSymbol comparison;
comparator::= "=="
            | ">"
            | "<"
            | "≥"
            | "≤";
operator::= "++"
           | "--"
           | "+"
           | "-"
           | "*"
           | "/";
arrayInitialization::= "Å" "("expression")" IDENTIFIER;
arrayListInitialization::= "Ålist" "("")" IDENTIFIER;
logicSymbol::= "|"
             | "&"
             | "!";
functionCall::= indentifier"("functionInput")";
functionInput::= unary
                | unary","functionInput
                | ;
assignment::= variable "=" expression
            | variable operator;
variable::= INTEGER
          | STRING
          | DOUBLE
          | CHARACTER
          | boolean
          | FLOAT;
boolean::= TRUE
         | FALSE;
unary ::= variable
        | NUMBER
        | expression;


//Jack Herakovich https://github.com/JackHerakovich/Programming-Languages/tree/main/Language
//basic grammar needs
program ::=statementList;

statementList ::= statement
                | statement statementList;

statement ::= function
            | variableInitialization
            | assignment
            | forLoop
            | whileLoop
            | infiniteLoop
            | expression
            | ifStatement
            | arrayInitialization
            | arrayListInitialization
            | functionCall;

expression::= primary binaryOperator primary
            | primary unaryOperator
            | unaryOperator primary
            | primary binaryOperator expression
            | primary;

//loops

forLoop::= "≈" "(" variableInitialization ";" comparison ";" expression ")" block;

whileLoop::= "◊" "(" comparison ")" block;

infiniteLoop::= "∞" block;

//if statements

ifStatement ::= "›" "(" comparison ")" block
              | "›" "(" comparison ")" block "»" ifStatement
              | "›" "(" comparison ")" block elseStatement
              | "›" "(" comparison ")" block "»" ifStatement elseStatement;

elseStatement::= "‹" block;

//functions

function::= "∏" IDENTIFIER "(" parameter? ")" block;

parameter::= VARIABLE
           | VARIABLE "," parameter
           | function;

block::="¿" statementList "?";

functionCall::= IDENTIFIER "(" functionInput? ")";

functionInput::= primary
               | primary "," functionInput;

//operators+comparison

comparison::=primary comparator primary
            | boolean;

comparator::= "=="
            | ">"
            | "<"
            | "≥"
            | "≤";

unaryOperator::= "++"
               | "-"
               | "--";

binaryOperator::=  "+"
           | "-"
           | "*"
           | "%"
           | "/";

//arrays

arrayInitialization::= "Å" "(" expression ")" IDENTIFIER;

arrayListInitialization::= "Ålist" "(" ")" IDENTIFIER;

//variables

variableInitialization::="¡" IDENTIFIER "=" expression;

assignment::= VARIABLE "=" expression
            | VARIABLE unaryOperator;

//primaries

boolean::= "true"
         | VARIABLE
         | "false";

primary ::= VARIABLE
          | INTEGER
          | STRING
          | DOUBLE
          | CHARACTER
          | boolean;

//built-ins

printStatement::= "print" "("expression")"
